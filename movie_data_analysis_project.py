# -*- coding: utf-8 -*-
"""Movie Data Analysis Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UAjHZZXybk7PmNKPKizLddQHi4NvM-_P
"""

# Commented out IPython magic to ensure Python compatibility.
# import library
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as  sns
import matplotlib.mlab as mlab
import matplotlib
plt.style.use('ggplot')
from matplotlib.pyplot import figure
# %matplotlib inline
matplotlib.rcParams['figure.figsize']=(12,8)
pd.options.mode.chained_assignment = None

df=pd.read_csv('/content/movies.csv')

df.head()

#lets see if there is any missing data
for col in df.columns:
    pct_missing = np.mean(df[col].isnull())
    print('{} - {}%'.format(col, round(pct_missing*100)))

print(df.dtypes)

#change data types of columns
df['budget'] = pd.to_numeric(df['budget'], errors='coerce')
df['gross'] = pd.to_numeric(df['gross'], errors='coerce')

df.head()

df['yearcorrect']=df['released'].astype(str).str[:4]
df.head()

df.sort_values(by=['gross'],inplace=False,ascending=False)

pd.set_option('display.max_rows',None)

#drop any duplicate
df.drop_duplicates()

df.drop_duplicates()

#scatter plot with budget vs gross
plt.scatter(x=df['budget'],y=df['gross'])
plt.title('Budget vs Gross Earning')
plt.xlabel('gross earning')
plt.ylabel('Budget')
plt.show()

#plot budget vs gros using seaborn
sns.regplot(x="score", y="gross", data=df,scatter_kws={"color":"red"},line_kws={"color":"blue"})

#find corelation
df.corr()

#high corelation between budget and gross
corelation_matrix=df.corr(method='pearson')
sns.heatmap(corelation_matrix,annot=True)
plt.title('corelation matrix for numeric feature')
plt.xlabel('Movie Feature')
plt.ylabel("Movie Feature")
plt.show()

#look at company
df_numerized=df

df_numerized = df


for col_name in df_numerized.columns:
    if(df_numerized[col_name].dtype == 'object'):
        df_numerized[col_name]= df_numerized[col_name].astype('category')
        df_numerized[col_name] = df_numerized[col_name].cat.codes

df_numerized.head()

corelation_matrix=df_numerized.corr(method='pearson')
sns.heatmap(corelation_matrix,annot=True)
plt.title('corelation matrix for numeric feature')
plt.xlabel('Movie Feature')
plt.ylabel("Movie Feature")
plt.show()

df_numerized.corr()

corelation_mat=df_numerized.corr()
corr_pairs=corelation_mat.unstack()
corr_pairs

sorted_pairs=corr_pairs.sort_values()
sorted_pairs

high_corr=sorted_pairs[sorted_pairs>0.5]
high_corr

